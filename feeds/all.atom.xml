<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>She Builds With Code</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2019-08-08T00:00:00-04:00</updated><entry><title>Where Are You Going?</title><link href="/blog/where-are-you-going.html" rel="alternate"></link><published>2019-08-08T00:00:00-04:00</published><updated>2019-08-08T00:00:00-04:00</updated><author><name>Noelle</name></author><id>tag:shebuildswithcode.com,2019-08-08:/blog/where-are-you-going.html</id><summary type="html">&lt;p&gt;Can't expect to get somewhere when you don't know where you want to end up.&lt;/p&gt;</summary><content type="html">&lt;p&gt;For the past few days, I've been restless in my coding education. Since I got this site up and running in Pelican, I've felt a little lost. I set out to build this site from the ground up, and I did. From complete blank page to site generator, I did this whole thing. And while it had it's challenges, I felt so...focused, awesome, powerful, like I was finally on the path to being a developer.&lt;/p&gt;
&lt;p&gt;Then I decided to veer off the path of a custom CMS, and towards my heart's mission: the bi-weekly budget that always I've wanted. Something that allows me to work in one app, and not the three I currently use to balance my money.&lt;/p&gt;
&lt;p&gt;But I've been floundering ever since I made that decision. I decided to try to learn a JavaScript framework as a gateway into the framework I really want to learn to build the app. Then I felt that I didn't have enough of a grasp of basic JavaScript to understand what the hell I was reading in those tutorials. So I decided I really just need to get back to my JavaScript basics. But, I zone out when I'm reading books, and I often get impatient with video courses. And while I love FreeCodeCamp, I find that I'm not retaining what I'm doing from lesson to lesson, even though I'm figuring it out as I go.&lt;/p&gt;
&lt;p&gt;Then I found an &lt;a href="https://www.freecodecamp.org/news/the-guaranteed-fastest-way-to-break-into-web-development/"&gt;article&lt;/a&gt; about the quickest way to become a Web Developer. The author's answer? Build projects. That's all.&lt;/p&gt;
&lt;p&gt;And that really resonated with me. When I was working on this site, I learned so much and felt so motivated to figure things out, even when I got pissed that something didn't work, or upset when a presentation didn't work. I had a project to work on, and it drove my learning.&lt;/p&gt;
&lt;p&gt;So I recognize I learn best when working on a project, and not just a series of code exercises, and I have a project in mind.&lt;/p&gt;
&lt;h2&gt;WHAT THE HELL IS THE PROBLEM THEN?&lt;/h2&gt;
&lt;p&gt;I shared my educational resistance with my husband (who is the best sport when it comes to my code nerd ramblings!). I talked to him about my successes with my site, and how I wanted to replicate that with my app, but it felt too big. I didn't know where to start and it was paralyzing me.&lt;/p&gt;
&lt;p&gt;He looks at me and says "Well, do you know specifically what you want your app to do?"&lt;/p&gt;
&lt;p&gt;&lt;img style="max-height:40rem;" class="img-fluid d-block mx-auto mb-3" src="/images/spiderman-face-palm.png" alt="Spiderman FacePalm"&gt;&lt;/p&gt;
&lt;p&gt;I realized, maybe for the first time ever, that I had no idea what specifically I wanted my app to do. And what I really mean is I didn't sit down and figure out my MVP for the app. All I could see was this massive final project that seemed completely beyond my skill set.&lt;/p&gt;
&lt;p&gt;I got this site up because I had a specific starting place (fully static site), and a specific next stop on the roadmap (site using a static site generator.). My app is still very much just an idea - a vague concept of what I'd like without any plan points.&lt;/p&gt;
&lt;p&gt;I also realized this - working on learning to code doesn't always mean writing code. I've read time and time again that most professional developers spend more time on non-code tasks. I think I felt that not actively writing code meant I wasn't learning. But I can't get somewhere if I have no idea where the hell I want to end up! I've got to work out a plan, just the way I did for my site.&lt;/p&gt;</content></entry><entry><title>Getting Back to Basics</title><link href="/blog/getting-back-to-basics.html" rel="alternate"></link><published>2019-08-04T00:00:00-04:00</published><updated>2019-08-04T00:00:00-04:00</updated><author><name>Noelle</name></author><id>tag:shebuildswithcode.com,2019-08-04:/blog/getting-back-to-basics.html</id><summary type="html">&lt;p&gt;Learning Javascript, for real this time.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my &lt;a href="/blog/grand-site-relaunch.html"&gt;previous post&lt;/a&gt;, I mentioned that I'm moving on to Javascript for the next step in my coding education. Specifically, I was tackling Vue framework. Feeling pretty confident off my success with tackling Pelican, I decided I'd start with the docs to learn it.&lt;/p&gt;
&lt;p&gt;NOPE! I immediately got lost - the docs seemed to assume Vue was your third or fourth framework, so I could not keep up.&lt;/p&gt;
&lt;p&gt;Then I decided to utilize my free lifetime subscription to Sitepoint (it was a CRAZY deal I snapped up forever ago. Comes in handy often!). And luck would have it, they just added a Vue instruction ebook. Woo Hoo! This would do the trick, right?&lt;/p&gt;
&lt;p&gt;NOPE! I got into the first example, and it had so many code errors, I didn't know enough to figure out how to fix it! It was discouraging to say the least. If I couldn't get through the first example without issue, I had no confidence in the rest of the book.&lt;/p&gt;
&lt;p&gt;So I was a little frustrated at this point....&lt;/p&gt;
&lt;p&gt;&lt;img style="max-height:40rem;" class="img-fluid d-block mx-auto mb-3" src="/images/woman-biting-pencil-computer.jpg" alt="Woman biting a pencil in front of a computer"&gt;&lt;/p&gt;
&lt;p&gt;But I began to realize something - part of my confusion with my resources was rooted in just understanding the base code I was looking at. I'd tried learning JavaScript early in my coding education, but I just didn't take to it and ended up with Python.&lt;/p&gt;
&lt;p&gt;I realize now, however, that JavaScript is unavoidable for what I want to do, so it's important to me to learn the language and all it's nuances before diving into a framework. Having the experience I now have with Python and building a few things, I feel I can get a better grip diving back into the basics.&lt;/p&gt;
&lt;p&gt;So I'm reading &lt;a href="https://eloquentjavascript.net/"&gt;Eloquent JavaScript&lt;/a&gt; and revisiting exercises in my &lt;a href="https://www.freecodecamp.org/"&gt;FreeCodeCamp&lt;/a&gt; account to build my JavaScript skills up. I'm loving the way the author breaks things down - haven't tackled any code in the first few chapters, but just a refresher on how the syntax works already feels better than any of my previous attempts at the language.&lt;/p&gt;</content></entry><entry><title>Live From My Linux Half!</title><link href="/blog/live-from-my-linux-half.html" rel="alternate"></link><published>2019-07-31T00:00:00-04:00</published><updated>2019-07-31T00:00:00-04:00</updated><author><name>Noelle</name></author><id>tag:shebuildswithcode.com,2019-07-31:/blog/live-from-my-linux-half.html</id><summary type="html">&lt;p&gt;Finally got off my Ubuntu Virtual Machine into a real dual boot.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since beginning this leg of my coding education, I decided early on to try and develop on Linux. I have a fairly fast machine (Acer Nitro Spin) that hosts an SSD as well as a 1TB HDD as it's intended to be a lower cost gaming machine. Because it was fast, I decided to try working on a virtual machine.&lt;/p&gt;
&lt;p&gt;Using Virtualbox and the latest version of Ubuntu, I built myself a basic linux virtual desktop that ran decently on my laptop. And until recently, I was happy to work on it. It ran on the SSD, so it was running fast enough to feel like a real machine.&lt;/p&gt;
&lt;p&gt;But it wasn't without it's issues. Video playback was severely stalled, and audio was inconsistent. If I wanted to watch a quick tutorial video, I'd have to launch a browser and go back and forth between my virtual machine and my actual operating system. It would also occasionally lag, specifically with VS Code.&lt;/p&gt;
&lt;p&gt;Finally I realized that I really didn't want to go back to coding in Windows, and decided to take the plunge and install a dual boot situation on my computer.&lt;/p&gt;
&lt;p&gt;Now I've been someone that has loved to peek under the hood of (and often break) my computers. I take them apart, find software and hardware tweaks, and have more often than not learned what to do by doing it wrong many times over. Took 3 total losses to properly learn how to back up my computer! Anyway, it had been a while since I had a computer project, so I was very excited to take the plunge. &lt;/p&gt;
&lt;p&gt;Annnnnd.....the end result was it worked! I am proudly typing this message on a fully functioning installation of Ubuntu on my computer!&lt;/p&gt;
&lt;p&gt;But to get there.....man that was a journey!&lt;/p&gt;
&lt;p&gt;First off, I started following &lt;a href="https://itsfoss.com/install-ubuntu-1404-dual-boot-mode-windows-8-81-uefi/"&gt;this tutorial&lt;/a&gt; to start the process. And side note, this whole site is just amazing. Truly a lifesaver in this whole process.&lt;/p&gt;
&lt;p&gt;Anyway, part way through installation, I got a little cocky and went to brag to my husband about what I was doing. (He humors my nerd code rants). But when I came back, my computer screen was black, the flash drive that held the ISO for Ubuntu was flashing like mad, and I couldn't access anything.&lt;/p&gt;
&lt;p&gt;&lt;img style="max-height:40rem;" class="img-fluid d-block mx-auto mb-3" src="/images/Computer-Angry-User-Internet-Unhappy-Frustration.png" alt="Unhappy Computer User"&gt;&lt;/p&gt;
&lt;p&gt;DAMNIT!!!&lt;/p&gt;
&lt;p&gt;I let it go for 30 minutes before finally doing a hard restart on the computer. I started up with my fingers crossed, and it started! And I even had GRUB, the linux boot menu there to pick my operating system.&lt;/p&gt;
&lt;p&gt;But, I couldn't log into the linux side of things. It kept cycling. So I did another hard restart, and debated what to do - delete and start over, or see if I could just re-install over the errors. I opted for choice two. That was the wrong choice. While the new installation did work, it did not allow me to shut down on the linux side. It just gave me a black screen with really scary messages of the CPU being frozen. Yet another hard restart.&lt;/p&gt;
&lt;p&gt;Then I had to figure out how to start back from zero properly. That required several tutorials, a few videos, and a couple of Stack Overflow posts to get it all done. Again, &lt;a href="https://itsfoss.com/uninstall-ubuntu-linux-windows-dual-boot/"&gt;It's FOSS&lt;/a&gt; was a lifesaver.&lt;/p&gt;
&lt;p&gt;Finally, I got it working! I set everything up, installed my programs, downloaded by backed up sites...but I couldn't get any of my Python virtual environments to work. I had assumed, since they're virtual, that copying and pasting the folder and files should be ready to work. It wasn't. And I'm honestly not completely clear on why it didn't work. Finally, I just deleted the Venv folder, and re-installed it, along with a new installation of Pelican.&lt;/p&gt;
&lt;p&gt;And now I'm back online! It was, at times, very frustrating, but I'm really glad I did it. Running Linux directly on my computer is so much faster, I have better access to my hardware, and honestly I just feel like a badass!&lt;/p&gt;</content></entry><entry><title>The Site Grand Relaunch!</title><link href="/blog/grand-site-relaunch.html" rel="alternate"></link><published>2019-07-28T00:00:00-04:00</published><updated>2019-07-28T00:00:00-04:00</updated><author><name>Noelle</name></author><id>tag:shebuildswithcode.com,2019-07-28:/blog/grand-site-relaunch.html</id><summary type="html">&lt;p&gt;This site is FINALLY powered by Pelican!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Finally! After weeks of fussing, cursing, and some weeping, I have changed my completely manual static site over to Pelican!&lt;/p&gt;
&lt;p&gt;&lt;img style="max-height:40rem;" class="img-fluid d-block mx-auto mb-3" src="/images/snoopy-dance-woohoo-meme.jpg" alt="Snoopy victory dance!"&gt;&lt;/p&gt;
&lt;p&gt;So what does that mean? In the &lt;a href="/blog/the-mvp-of-this-site.html"&gt;intro post&lt;/a&gt; to this blog, I talked about using this site as an experiment, a live workplace for my web development education. Initially, it was completely static. And now, I'm employing code to do most of the manual lifting for my site.&lt;/p&gt;
&lt;p&gt;Obviously, there's nothing visually different here. But sooo much has happened since my last post.&lt;/p&gt;
&lt;p&gt;Learning Pelican was fun, but challenging. There aren't a ton of tutorials on it, so I pieced everything together between the docs and a few helpful blog posts.&lt;/p&gt;
&lt;p&gt;So my workload to post to the site went from looking like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open &lt;em&gt;post.html&lt;/em&gt; template, save as with new blog title&lt;/li&gt;
&lt;li&gt;Write post&lt;/li&gt;
&lt;li&gt;Edit &lt;em&gt;index.html&lt;/em&gt; by copying and pasting the last post snippet, edit to match new post.&lt;/li&gt;
&lt;li&gt;Upload to site via FTP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;to this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create new Markdown file, with header info&lt;/li&gt;
&lt;li&gt;Write post&lt;/li&gt;
&lt;li&gt;Run  &lt;code&gt;make publish upload_ssh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Still a little more than logging into a Wordpress site, but so much more satisfying! Having an understanding of everything I have so far (more or less) has been worth it.&lt;/p&gt;
&lt;p&gt;There were a few things that I just had to give up and hack a workaround:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Many parts of my theme are hard coded, instead of using template tags. While it was cool to learn ultimately I don't plan on distributing this theme, so cut myself some slack there.&lt;/li&gt;
&lt;li&gt;I didn't quite figure out how to add a custom 404 page to my theme, so I manually added it to the server. Since it's not in the content structure of Pelican, it will remain undisturbed.&lt;/li&gt;
&lt;li&gt;I also couldn't figure out how to strip the trailing &lt;em&gt;.html&lt;/em&gt; from my URL's. I tried to adjust my URL settings in Pelican, and tried to edit my .htaccess rules, but after struggling with this for an hour I decided to let it be for now.&lt;/li&gt;
&lt;li&gt;Lastly, I don't have a great solution for comments on the site yet. There are some options, but I just don't know if it's worth the struggle right now. I don't have people banging down the door for comments, and at the very least I've got each post linked to my &lt;a href="https://twitter.com/SheBuildsWCode"&gt;Twitter&lt;/a&gt; account, so I can at least engage people there.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Originally from here, I planned to build a custom CMS using Flask. However, I think I may stay in this format for a while. It's something I want to do, but to be honest it's not my top priority.&lt;/p&gt;
&lt;p&gt;My main reason for trying to learn to code is that I have an idea for an app I want to build for myself. It's a budget that works for bi-weekly paychecks. I've seen a few of these online, and tried to use them, but I find I'm always stringing a bunch of hacks together to work with the main app. I've yet to find the app I want,so I'm going to build it.&lt;/p&gt;
&lt;p&gt;I'm leaving Python for a little and switching to JavaScript. Specifically, I'm going to learn Vue &amp;amp; React Native. Why Vue? I heard it was a bit easier to grasp than React, and I found a tutorial that creates a budget app with Vue. Figure it's a great intro to what I'm trying to do.&lt;/p&gt;
&lt;p&gt;Here we go!&lt;/p&gt;</content></entry><entry><title>I Am In Over My Head!</title><link href="/blog/i-am-in-over-my-head.html" rel="alternate"></link><published>2019-07-12T00:00:00-04:00</published><updated>2019-07-12T00:00:00-04:00</updated><author><name>Noelle</name></author><id>tag:shebuildswithcode.com,2019-07-12:/blog/i-am-in-over-my-head.html</id><summary type="html">&lt;p&gt;Diving into using a static site generator after using manual static has it's challenges!&lt;/p&gt;</summary><content type="html">&lt;p&gt;I had a bit of an indecisive moment before launching into the next phase of my site. As I had mentioned, I was set on building version 2 of the site with &lt;a href="https://blog.getpelican.com/"&gt;Pelican Static Site Generator&lt;/a&gt; for a number of reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It is written in Python, my primary language of choice&lt;/li&gt;
&lt;li&gt;While there are other static site generators written in Python, none had the development or community around it the way Pelican did.&lt;/li&gt;
&lt;li&gt;It uses &lt;a href="http://jinja.pocoo.org/"&gt;Jinja&lt;/a&gt; templates to render the pages, which is also used by Flask&lt;/li&gt;
&lt;li&gt;I plan to use Flask to build a custom blog in the final version of the site, so Pelican seemed like a good mid step.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;However, I can't ever stop searching for the "right" answer, so I kept digging a little more around the internet for peoples opinions. In a Twitter feed, I think, someone mentioned &lt;a href="https://www.getlektor.com/"&gt;Lektor.&lt;/a&gt; It's another static site generator built in Python. It was mentioned because it offered an admin panel, similar to a WordPress blog, something that other site generators didn't do.&lt;/p&gt;
&lt;p&gt;My initial thought was "Oh, cool! That will give me the ability to post from my phone!"&lt;/p&gt;
&lt;p&gt;&lt;img style="max-height:40rem;" class="img-fluid d-block mx-auto mb-3" src="/images/facepalm-cat.png" alt="Facepalm Cat Meme"&gt;&lt;/p&gt;
&lt;p&gt;The admin panel is a locally housed admin panel...cause this is a static site generator that doesn't have a database. The code generates the static pages, then those pages get uploaded.&lt;/p&gt;
&lt;p&gt;Anyway, on closer inspection, I found that Pelican still had the widest use and more features available. So I went back to the original plan.&lt;/p&gt;
&lt;p&gt;I followed the quickstart installation instructions, and they were pretty easy to follow. I set up a second folder in my &lt;a href="https://github.com/elleon003/she-builds-with-code"&gt;GitHub&lt;/a&gt; repo for the project files, and started to dive in.&lt;/p&gt;
&lt;p&gt;I started reading through the documentation, but found myself following too many rabbit holes. So then I decided I'd start working on a specific goal, like converting my blog posts to Markdown. But I kept getting caught up in how to bring over the styling, which lead me to decide to start building my custom theme instead.&lt;/p&gt;
&lt;p&gt;A note - this is the first time I've ever tried to build something on my own, just using the documentation without any tutorial. And after trying to understand what I was reading for about 5 minutes made me realize that I was in waaaaay over my head.0&lt;/p&gt;
&lt;p&gt;For a second, I really panicked. &lt;em&gt;"Maybe this was a dumb idea. Maybe I'm not good enough yet to try this. Maybe I should take this down and do something else for a bit, gain more experience."&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But then I realized, there's really nothing to lose here. Sure, I don't fully understand what I'm doing yet, but that's the beauty of learning!&lt;/p&gt;
&lt;p&gt;This project is mine - it's not for anyone else, no one is expecting this for a grade or as a client. The worst thing that would happen is I break my site and have to fix it. If I want to do this, that kind of thing would happen. Isn't it better that I learn it in a low-stakes situation first?&lt;/p&gt;
&lt;p&gt;So I'm working through it, slowly. And if I don't understand something, I'm going to try what I think and see what happens. And if I'm right or wrong, I'll learn from it. Honestly, I'll retain better if I struggle through something vs. finding the answer in Google. I needed to remind myself that's the whole purpose of this.&lt;/p&gt;</content></entry><entry><title>What in the holy CSS?!</title><link href="/blog/what-the-holy-css.html" rel="alternate"></link><published>2019-07-06T00:00:00-04:00</published><updated>2019-07-06T00:00:00-04:00</updated><author><name>Noelle</name></author><id>tag:shebuildswithcode.com,2019-07-06:/blog/what-the-holy-css.html</id><summary type="html">&lt;p&gt;I think my site has a mobile ghost...&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ok, this wasn't supposed to be my focus today, so this is going to be short, but I had to share the newest frustration with my site&lt;/p&gt;
&lt;p&gt;So as I had done previously, I got my site up, wrote about my struggles, posted that, then tested the site on my phone.&lt;/p&gt;
&lt;p&gt;Imagine my dismay when this is what I saw.....&lt;/p&gt;
&lt;p&gt;&lt;img style="max-height:40rem;" class="img-fluid d-block mx-auto mb-3" src="/images/floating-footer.jpg" alt="My site with the footer in the middle"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WHAT THE HOLY HELL???&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, I wasn't able to duplicate this on my desktop at all, and it was doing this on all my pages, on all of the mobile browsers I used. Too fried from the day, I decided to make it my priority today.&lt;/p&gt;
&lt;p&gt;Jumping in today, before I did anything, I gave my site a refresh....and the damn thing was fine! No floating footers, no spacing issues, nothing.&lt;/p&gt;
&lt;p&gt;So yeah.....I really don't know what to say about it. While the explorer part of me wants to dive deep into the how of all of it, the rest of me wants to be done with manually updating my static site. That side is a little louder, so I'm filing this under "check this out later" and looking to start working on Pelican today.&lt;/p&gt;
&lt;p&gt;Really hoping to not run into any more web ghosts today...&lt;/p&gt;</content></entry><entry><title>Damnit, just stick footer!</title><link href="/blog/damnit-just-stick-footer.html" rel="alternate"></link><published>2019-07-05T00:00:00-04:00</published><updated>2019-07-05T00:00:00-04:00</updated><author><name>Noelle</name></author><id>tag:shebuildswithcode.com,2019-07-05:/blog/damnit-just-stick-footer.html</id><summary type="html">&lt;p&gt;Determined to get a grip on a sticky footer.&lt;/p&gt;</summary><content type="html">&lt;p&gt;After uploading the site yesterday, I made sure to click around the site live. For one, I was really proud that I got it up and wanted to bask in it a little bit. And secondly, I wanted to check all my links. Sure enough, I had one link that was incomplete, an internal link that had a typo, and a outgoing link that didn’t open in a new tab.
Once that was all fixed, I took a look at it on my phone. And………… &lt;/p&gt;
&lt;p&gt;&lt;img style="max-height:40rem;" class="img-fluid d-block mx-auto mb-3" src="/images/non-sticky-footer.jpg"alt="Screenshot of floating footer on mobile"&gt;&lt;/p&gt;
&lt;p&gt;DAMMIT!!&lt;/p&gt;
&lt;p&gt;In previous projects, I have struggled with getting my footer to stick to the bottom of the window. But each time I’ve fixed it, I’ve just copied and pasted code I’ve found. I honestly didn’t understand how it worked. This time, I was determined to make it make sense. Here are the key parts of my HTML:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;h-100&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en-US&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
........
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;d-flex flex-column h-100&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar navbar-expand-lg navbar-light bg-primary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Nav stuff here
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;flex-shrink-0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;footer mt-auto py-2 bg-dark&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Footer content
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Full disclosure - I took this code directly from the Sticky Footer example provided by Bootstrap. But after I applied it, I played around in the Developer tools on Firefox turning styles off and on. I also missed applying a class to an item, and once I discovered that mistake, I felt I had a tiny better grip on how it all worked.&lt;/p&gt;
&lt;p&gt;These classes applied to the body: &lt;code&gt;&amp;lt;body class="d-flex flex-column h-100"&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;d-flex applies flexbox display on the body element.&lt;/li&gt;
&lt;li&gt;flex-column changes the direction of all child elements to stack vertically, instead of the default row view of flexbox. &lt;/li&gt;
&lt;li&gt;and h-100 makes the body's height take up 100% of the available space, set by the parent element&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As the parent element, this: &lt;code&gt;&amp;lt;html class="h-100" lang="en-US"&amp;gt;&lt;/code&gt; was also applied to make sure that the page was displaying on 100% of the available view.&lt;/p&gt;
&lt;p&gt;This: &lt;code&gt;&amp;lt;main class="flex-shrink-0"&amp;gt;&lt;/code&gt; ...I'll be dead honest - I'm not completely clear on this. I know that by default, flex will grow and shrink elements in a container evenly by default. Telling it to shrink by 0 means the main content will not shrink in height (height instead of width because the parent container is displaying everything in columns.) And as the part of code I initially forgot, I know it's key to pushing the footer to the bottom of the screen.&lt;/p&gt;
&lt;p&gt;So yeah....I've got a better grip, but not good enough to fully explain it. CSS is going to be a challenge for me in this project.&lt;/p&gt;
&lt;p&gt;To wrap this post up, I’ve decided to start the &lt;a href="https://www.100daysofcode.com/"&gt;#100DaysofCode&lt;/a&gt; challenge using this site. I’ve tried before, but quit early because I had no clear direction for how I spent my time coding, no end project in mind. This time, I’ve got clear mile-markers for this site, with a ton of stuff to learn along the way. Follow me on Twitter &lt;a href="https://twitter.com/SheBuildsWCode"&gt;@SheBuildsWCode&lt;/a&gt; or sign up for email updates below!&lt;/p&gt;</content></entry><entry><title>The MVP of this site (Minimum Viable Product)</title><link href="/blog/the-mvp-of-this-site.html" rel="alternate"></link><published>2019-07-02T00:00:00-04:00</published><updated>2019-07-02T00:00:00-04:00</updated><author><name>Noelle</name></author><id>tag:shebuildswithcode.com,2019-07-02:/blog/the-mvp-of-this-site.html</id><summary type="html">&lt;p&gt;Where it all starts&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you haven't yet, I recommend reading the &lt;a href="/about.html"&gt;About&lt;/a&gt; page of this site, just so you know what you're getting into!&lt;/p&gt;
&lt;p&gt;For day one of my “build as you learn” site, I’m going with the most minimum site I can build – a few HTML pages, styled with a little CSS (mainly Bootstrap).&lt;/p&gt;
&lt;p&gt;For the most part, I’m going to build everything, but I’m going to use some frameworks as I go. But since I need to learn those frameworks, and the goal here is to make constant progress now that I’ve started, I’m starting very small.&lt;/p&gt;
&lt;p&gt;That said, I am not a designer. I have no desire to be a designer. My goals in code are geared more toward Backend development, so I’m using Bootstrap for styles instead of trying to build all my CSS from the ground up.&lt;/p&gt;
&lt;p&gt;Initially, this will be a static site – I’ll be manually updating all new posts on the home page. Obviously this is going to get old VERY quickly, so the next version of this site (and the subject of the next series of my posts) will be dedicated to learning a Python based site generator named &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; to eliminate this pain in the ass.&lt;/p&gt;
&lt;p&gt;That said, I'm extremely excited to have gotten this far. Building the home page, this post, the about page, and the contact page has taken me all day (at least around 8 hours), but I'm thrilled to see my work.&lt;/p&gt;
&lt;p&gt;So all that I accomplished on this first day:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Purchased and setup the domain &lt;a href="/"&gt;&lt;em&gt;She Builds With Code.com&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Downloaded my personal html boilerplate code from my &lt;a href="https://github.com/elleon003/my-html-boilerplate"&gt;GitHub repo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Wrote my about page and this post&lt;/li&gt;
&lt;li&gt;It was really important to me to write before I got too tired, so it came before I dove into code.&lt;/li&gt;
&lt;li&gt;Created and integrated my signup forms for MailChimp&lt;/li&gt;
&lt;li&gt;Don't forget to &lt;a href="#mc_embed_signup"&gt;sign up&lt;/a&gt; for updates!&lt;/li&gt;
&lt;li&gt;Created my &lt;a href="/contact-me.html"&gt;Contact&lt;/a&gt; page, using a service called &lt;a href="https://formspree.io/"&gt;Formspree&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Installed &lt;a href="https://matomo.org/"&gt;Matomo&lt;/a&gt; Web Analytics (open source web analytics)&lt;/li&gt;
&lt;li&gt;Uploaded the site to a &lt;a href="https://github.com/elleon003/she-builds-with-code/"&gt;GitHub repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Used cPanel's Git integration to upload my site to my &lt;a href="http://www.a2hosting.com?aid=5b02ff493a6f4"&gt;A2 Hosting&lt;/a&gt; account.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not a ton of coding today, not surprising considering the setup needed to get started.The cool thing is after typing my own HTML today, I have finally remembered what the HTML snippet is to open a link in a new tab. It's &lt;code&gt;target="_blank"&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img style="max-height:40rem;" class="img-fluid d-block mx-auto mb-3" src="/images/snoopy-dance-woohoo-meme.jpg"alt="Snoopy Dance"&gt;&lt;/p&gt;
&lt;p&gt;In addition to learning Pelican, I'll also be looking at adding comment functionality. Initially, I thought about using a 3rd party program like Disqus, but this site is going to go through so many changes as I learn. I didn't like the idea of not owning the content on my site - I'd run the risk of losing all of it if I decided to switch after things had gotten started!&lt;/p&gt;
&lt;p&gt;Thanks for sticking around. I'm excited to see where we go from here.&lt;/p&gt;</content></entry></feed>